#include <eosio/vm/backend.hpp>

#include "utils.hpp"
#include <catch2/catch.hpp>

using namespace eosio::vm;

extern wasm_allocator wa;

namespace {

/*
 * (module
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 * )
 */

std::vector<uint8_t> _1024_bytes_mixed_wasm = {
   0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x06, 0xc2, 0x07, 0xc0,
   0x01, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b
};

/*
 * (module
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i32) (i32.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 *   (global (mut i64) (i64.const 0))
 * )
 */

std::vector<uint8_t> _1028_bytes_mixed_wasm = {
   0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x06, 0xc7, 0x07, 0xc1,
   0x01, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01,
   0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f,
   0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41,
   0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b,
   0x7f, 0x01, 0x41, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e,
   0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42,
   0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b,
   0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01,
   0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00, 0x0b, 0x7e, 0x01, 0x42, 0x00,
   0x0b, 0x7f, 0x01, 0x41, 0x00, 0x0b
};

struct empty_options {};
struct dynamic_options {
   std::uint32_t max_mutable_global_bytes;
};
struct static_options {
   static constexpr std::uint32_t max_mutable_global_bytes = 1024;
};
struct small_options {
   static constexpr std::uint8_t max_mutable_global_bytes = 255;
};

}

BACKEND_TEST_CASE("Test max_mutable_global_bytes default", "[max_mutable_global_bytes_test]") {
   using backend_t = backend<std::nullptr_t, TestType>;
   backend_t backend1024(_1024_bytes_mixed_wasm, &wa);
   backend_t backend1028(_1028_bytes_mixed_wasm, &wa);
}

BACKEND_TEST_CASE("Test max_mutable_global_bytes static", "[max_mutable_global_bytes_test]") {
   using backend_t = backend<std::nullptr_t, TestType, static_options>;
   backend_t backend(_1024_bytes_mixed_wasm, &wa);
   CHECK_THROWS_AS(backend_t(_1028_bytes_mixed_wasm, &wa), wasm_parse_exception);
}

BACKEND_TEST_CASE("Test max_mutable_global_bytes unlimited", "[max_mutable_global_bytes_test]") {
   using backend_t = backend<std::nullptr_t, TestType, empty_options>;
   backend_t backend1024(_1024_bytes_mixed_wasm, &wa);
   backend_t backend1028(_1028_bytes_mixed_wasm, &wa);
}

BACKEND_TEST_CASE("Test max_mutable_global_bytes dynamic", "[max_mutable_global_bytes_test]") {
   using backend_t = backend<std::nullptr_t, TestType, dynamic_options>;
   backend_t backend1024(_1024_bytes_mixed_wasm, nullptr, dynamic_options{1024});
   CHECK_THROWS_AS(backend_t(_1028_bytes_mixed_wasm, nullptr, dynamic_options{1024}), wasm_parse_exception);
   backend_t backend1028(_1028_bytes_mixed_wasm, nullptr, dynamic_options{1028});
}

BACKEND_TEST_CASE("Test max_mutable_global_bytes small", "[max_mutable_global_bytes_test]") {
   using backend_t = backend<std::nullptr_t, TestType, small_options>;
   CHECK_THROWS_AS(backend_t(_1024_bytes_mixed_wasm, &wa), wasm_parse_exception);
   CHECK_THROWS_AS(backend_t(_1028_bytes_mixed_wasm, &wa), wasm_parse_exception);
}
